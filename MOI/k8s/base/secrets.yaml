# Secrets for the application
# Note: These are templates. In production, use external secret management tools like:
# - AWS Secrets Manager
# - Azure Key Vault
# - Google Secret Manager
# - HashiCorp Vault
# - Kubernetes External Secrets Operator

# MongoDB credentials
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: social-media-ai
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  # echo -n 'admin' | base64 -> YWRtaW4=
  # echo -n 'password123' | base64 -> cGFzc3dvcmQxMjM=
  username: YWRtaW4=
  password: cGFzc3dvcmQxMjM=
---
# Redis credentials
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: social-media-ai
type: Opaque
data:
  # echo -n 'redis123' | base64 -> cmVkaXMxMjM=
  password: cmVkaXMxMjM=
---
# Application secrets
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: social-media-ai
type: Opaque
data:
  # Replace with your actual JWT secrets (base64 encoded)
  # Generate strong secrets: openssl rand -base64 32
  jwt-secret: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==
  jwt-refresh-secret: eW91ci1zdXBlci1zZWNyZXQtcmVmcmVzaC1rZXktY2hhbmdlLWluLXByb2R1Y3Rpb24=
---
# AI service secrets
apiVersion: v1
kind: Secret
metadata:
  name: ai-secrets
  namespace: social-media-ai
type: Opaque
data:
  # Replace with your actual OpenAI API key (base64 encoded)
  openai-api-key: eW91ci1vcGVuYWktYXBpLWtleS1oZXJl
---
# Social media platform secrets
apiVersion: v1
kind: Secret
metadata:
  name: social-secrets
  namespace: social-media-ai
type: Opaque
data:
  # Replace with your actual social media API credentials (base64 encoded)
  linkedin-client-id: eW91ci1saW5rZWRpbi1jbGllbnQtaWQ=
  linkedin-client-secret: eW91ci1saW5rZWRpbi1jbGllbnQtc2VjcmV0
  twitter-client-id: eW91ci10d2l0dGVyLWNsaWVudC1pZA==
  twitter-client-secret: eW91ci10d2l0dGVyLWNsaWVudC1zZWNyZXQ=
  instagram-client-id: eW91ci1pbnN0YWdyYW0tY2xpZW50LWlk
  instagram-client-secret: eW91ci1pbnN0YWdyYW0tY2xpZW50LXNlY3JldA==
---
# Notification service secrets
apiVersion: v1
kind: Secret
metadata:
  name: notification-secrets
  namespace: social-media-ai
type: Opaque
data:
  # Replace with your actual notification service credentials (base64 encoded)
  sendgrid-api-key: eW91ci1zZW5kZ3JpZC1hcGkta2V5
  twilio-account-sid: eW91ci10d2lsaW8tYWNjb3VudC1zaWQ=
  twilio-auth-token: eW91ci10d2lsaW8tYXV0aC10b2tlbg==
  firebase-server-key: eW91ci1maXJlYmFzZS1zZXJ2ZXIta2V5
---
# ConfigMap for MongoDB initialization scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-scripts
  namespace: social-media-ai
data:
  01-init.js: |
    // MongoDB initialization script for AI-Powered Social Media Management System
    // This script creates the necessary databases, collections, and indexes

    // Switch to the main database
    db = db.getSiblingDB('social_media_ai');

    // Create collections with validators and indexes

    // Users collection (for auth service)
    db.createCollection('users', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['email', 'password', 'role'],
          properties: {
            email: {
              bsonType: 'string',
              pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'
            },
            password: {
              bsonType: 'string',
              minLength: 8
            },
            role: {
              bsonType: 'string',
              enum: ['user', 'admin']
            },
            subscription: {
              bsonType: 'object',
              properties: {
                plan: {
                  bsonType: 'string',
                  enum: ['free', 'basic', 'pro', 'enterprise']
                },
                status: {
                  bsonType: 'string',
                  enum: ['active', 'inactive', 'cancelled', 'past_due']
                }
              }
            }
          }
        }
      }
    });

    // Create indexes for users
    db.users.createIndex({ email: 1 }, { unique: true });
    db.users.createIndex({ 'subscription.plan': 1 });
    db.users.createIndex({ 'subscription.status': 1 });
    db.users.createIndex({ createdAt: 1 });
    db.users.createIndex({ lastLogin: 1 });

    // Content collection (for content service)
    db.createCollection('contents', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['title', 'type', 'status', 'userId'],
          properties: {
            title: {
              bsonType: 'string',
              minLength: 1,
              maxLength: 200
            },
            type: {
              bsonType: 'string',
              enum: ['post', 'story', 'reel', 'video']
            },
            status: {
              bsonType: 'string',
              enum: ['draft', 'pending_approval', 'approved', 'rejected', 'scheduled', 'published']
            },
            platforms: {
              bsonType: 'array',
              items: {
                bsonType: 'string',
                enum: ['linkedin', 'twitter', 'instagram', 'tiktok', 'youtube']
              }
            }
          }
        }
      }
    });

    // Create indexes for content
    db.contents.createIndex({ userId: 1 });
    db.contents.createIndex({ status: 1 });
    db.contents.createIndex({ platforms: 1 });
    db.contents.createIndex({ scheduledDate: 1 });
    db.contents.createIndex({ createdAt: 1 });
    db.contents.createIndex({ 'aiGenerated': 1 });

    print('Database initialization completed successfully!');
    print('Created collections with proper validation and indexes');

  02-seed.js: |
    // Seed data for AI-Powered Social Media Management System
    db = db.getSiblingDB('social_media_ai');

    // Insert notification templates
    const notificationTemplates = [
      {
        type: 'content_approved',
        channel: 'in_app',
        template: {
          title: 'Content Approved',
          body: 'Your content "{{title}}" has been approved and is ready for scheduling.',
          action: {
            type: 'navigate',
            url: '/content/{{contentId}}'
          }
        },
        isActive: true
      }
    ];

    db.notificationtemplates.insertMany(notificationTemplates);
    print('Inserted notification templates');

    // Create sample admin user
    const adminUser = {
      email: 'admin@socialmedia.ai',
      password: '$2b$10$rHhVzzr9OpNECBZoNR2ov.Tx3Ttz1GVqBF6B5S7KZWc8pZ6Z.QQKy',
      firstName: 'System',
      lastName: 'Administrator',
      role: 'admin',
      isEmailVerified: true,
      subscription: {
        plan: 'enterprise',
        status: 'active',
        startDate: new Date()
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };

    db.users.insertOne(adminUser);
    print('Created admin user: admin@socialmedia.ai');
    print('Database seeding completed successfully!');
